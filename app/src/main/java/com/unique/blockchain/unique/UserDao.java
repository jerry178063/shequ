package com.unique.blockchain.unique;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.unique.blockchain.nft.domain.UserInfoConverent;
import com.unique.blockchain.nft.domain.wallet.AssectConverent;
import java.util.List;

import com.unique.blockchain.nft.domain.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Psd = new Property(2, String.class, "psd", false, "PSD");
        public final static Property Did = new Property(3, String.class, "did", false, "DID");
        public final static Property Did_psd = new Property(4, byte[].class, "did_psd", false, "DID_PSD");
        public final static Property MObjectList = new Property(5, String.class, "mObjectList", false, "M_OBJECT_LIST");
        public final static Property MassectList = new Property(6, String.class, "massectList", false, "MASSECT_LIST");
    }

    private final UserInfoConverent mObjectListConverter = new UserInfoConverent();
    private final AssectConverent massectListConverter = new AssectConverent();

    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PSD\" TEXT," + // 2: psd
                "\"DID\" TEXT," + // 3: did
                "\"DID_PSD\" BLOB," + // 4: did_psd
                "\"M_OBJECT_LIST\" TEXT," + // 5: mObjectList
                "\"MASSECT_LIST\" TEXT);"); // 6: massectList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String psd = entity.getPsd();
        if (psd != null) {
            stmt.bindString(3, psd);
        }
 
        String did = entity.getDid();
        if (did != null) {
            stmt.bindString(4, did);
        }
 
        byte[] did_psd = entity.getDid_psd();
        if (did_psd != null) {
            stmt.bindBlob(5, did_psd);
        }
 
        List mObjectList = entity.getMObjectList();
        if (mObjectList != null) {
            stmt.bindString(6, mObjectListConverter.convertToDatabaseValue(mObjectList));
        }
 
        List massectList = entity.getMassectList();
        if (massectList != null) {
            stmt.bindString(7, massectListConverter.convertToDatabaseValue(massectList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String psd = entity.getPsd();
        if (psd != null) {
            stmt.bindString(3, psd);
        }
 
        String did = entity.getDid();
        if (did != null) {
            stmt.bindString(4, did);
        }
 
        byte[] did_psd = entity.getDid_psd();
        if (did_psd != null) {
            stmt.bindBlob(5, did_psd);
        }
 
        List mObjectList = entity.getMObjectList();
        if (mObjectList != null) {
            stmt.bindString(6, mObjectListConverter.convertToDatabaseValue(mObjectList));
        }
 
        List massectList = entity.getMassectList();
        if (massectList != null) {
            stmt.bindString(7, massectListConverter.convertToDatabaseValue(massectList));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // psd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // did
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // did_psd
            cursor.isNull(offset + 5) ? null : mObjectListConverter.convertToEntityProperty(cursor.getString(offset + 5)), // mObjectList
            cursor.isNull(offset + 6) ? null : massectListConverter.convertToEntityProperty(cursor.getString(offset + 6)) // massectList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPsd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDid_psd(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setMObjectList(cursor.isNull(offset + 5) ? null : mObjectListConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setMassectList(cursor.isNull(offset + 6) ? null : massectListConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
